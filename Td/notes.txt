La BD > Des collections (DataStore) > les documents

La collection message :
-> user_id (index de l'utilisateur)
-> Le nom (pour l'affichage)
-> La Date
-> Le contenu


Afficher les messages

Plusieurs docs
mon_datastore.find({"user_id": 5}, function (err, docs){

    
} )

mon_datastore.findOne({}, function(err, doc) {
    console.log(doc.text);
}


Question 9
user_id <- users.get(login);
user_id <- req.session.user_id

function getDocuments(user_id, content, collection){
    collection.find({author_id:user_id, text:content}, function (err, doc) => {


        ....
        resolve(doc)


    })

}

Les opérateurs

$lt(e) -> lower than (plus petit que) , et e (pour equal)
$gt(e) -> greater than
$in -> par ex la valeur de user_id est dans un sous-enssemble
        $in:[10, 15,20]


Messages amis utilisateur 256
-> Trouver la liste des amis de 256
-> Utiliser l'opérateur $in sur les ids des amis


Le code -> retrouver les messages des amis de l'utilisateur connécté (user_id = req.session.user_id)
-> friends SQL
|from_user| to_user | date |
|1        |  2      | ---- |


async get_friends(user_id){
    return new Promise((resolve, reject) =>{
        let statement =
        this.database.prepare("SELECT to_user, since FROM friends WHERE from_user=?");
        statement.all([user_id], function (err, rows){
            if(err){
                console.error("SQL query error", err);
                reject();
            }
            else{
                let ret_obj = [];
                rows.forEach((row) => {
                    ret_obj.push(row.to_user)
                });
                resolve(ret_obj)
            }
        });
    });
}
    

class Message{
    constructor(col){
        self.nedb_collection =  col;
    }

    getMessageByUserID(list_user_id){
        return new Promise((resolve, reject) => {
            self.nedb_collection.find({user_id:{$in:list_user_id}}, function(err, docs){
                if(err){
                    reject(err);
                }
                else{
                    resolve(docs);
                }
            });
        });
    }

}

async function get_messages_friends(req, res){
    try{
        let user_id = req.session.user_id;
        if(!user_id){
            res.status(404).send({"message":"erreur: utilisateur non loggé"});
        } 
        lusers = await friends.getfriends(user_id);

        messages.getMessageByUserID(lusers)
        .then((list_documents) => {res.status(301).send(list_documents)})
        .catch(() => {....});
    catch{


    }

}